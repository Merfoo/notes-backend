type Query {
    getNotes(username: String, filter: String, skip: Int, first: Int, orderBy: NoteOrderByInput): Notes!
    getUser(username: String!): User
}

type Mutation {
    signup(email: String!, username: String!, password: String!): AuthPayload!
    login(email: String!, password: String!): AuthPayload!
    createNote(titleId: String!, title: String!, body: String!): Note!
    deleteNote(titleId: String!): String!
}


type User {
    id: ID!
    createdAt: String!
    email: String!
    username: String!
    notes: [Note!]!
}

enum NoteOrderByInput {
    createdAt_ASC
    createdAt_DESC
    title_ASC
    title_DESC
    body_ASC
    body_DESC
}

type Note {
    id: ID!
    createdAt: String!
    createdBy: User!
    titleId: String!
    title: String!
    body: String!
}

type Notes {
    notes: [Note!]!
    count: Int!
}

type AuthPayload {
    token: String!
    user: User!
}
