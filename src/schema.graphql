enum NoteOrderByInput {
    createdAt_ASC
    createdAt_DESC
    title_ASC
    title_DESC
    body_ASC
    body_DESC
}

type Query {
    getPublicNotes(username: String, filter: String, skip: Int, first: Int, orderBy: NoteOrderByInput): Notes!
    getNote(titleId: String!): Note
    getUser(username: String!): UserDetailsAndNotes
}

type Mutation {
    signup(email: String!, username: String!, password: String!): AuthPayload!
    login(email: String!, password: String!): AuthPayload!
    emailPasswordReset(email: String!): String!
    resetPassword(resetId: String!, password: String!): AuthPayload
    createNote(title: String!, body: String!, isPrivate: Boolean!): Note!
    updateNote(titleId: String!, body: String!, isPrivate: Boolean!): Note!
    deleteNote(titleId: String!): Note!
    updateUser(username: String!, email: String!): User!
    deleteUser(username: String!): User!
}

type User {
    createdAt: String!
    username: String!
}

type UserDetailsAndNotes {
    createdAt: String!
    username: String!
    email: String!
    notes: [Note!]!
}

type Note {
    id: ID!
    createdAt: String!
    createdBy: User!
    titleId: String!
    title: String!
    body: String!
    isPrivate: Boolean!
}

type Notes {
    notes: [Note!]!
    count: Int!
}

type AuthPayload {
    token: String!
    user: User!
}
