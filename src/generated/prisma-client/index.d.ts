// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  note: (where?: NoteWhereInput) => Promise<boolean>;
  passwordReset: (where?: PasswordResetWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  note: (where: NoteWhereUniqueInput) => NoteNullablePromise;
  notes: (args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Note>;
  notesConnection: (args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NoteConnectionPromise;
  passwordReset: (
    where: PasswordResetWhereUniqueInput
  ) => PasswordResetNullablePromise;
  passwordResets: (args?: {
    where?: PasswordResetWhereInput;
    orderBy?: PasswordResetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PasswordReset>;
  passwordResetsConnection: (args?: {
    where?: PasswordResetWhereInput;
    orderBy?: PasswordResetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PasswordResetConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createNote: (data: NoteCreateInput) => NotePromise;
  updateNote: (args: {
    data: NoteUpdateInput;
    where: NoteWhereUniqueInput;
  }) => NotePromise;
  updateManyNotes: (args: {
    data: NoteUpdateManyMutationInput;
    where?: NoteWhereInput;
  }) => BatchPayloadPromise;
  upsertNote: (args: {
    where: NoteWhereUniqueInput;
    create: NoteCreateInput;
    update: NoteUpdateInput;
  }) => NotePromise;
  deleteNote: (where: NoteWhereUniqueInput) => NotePromise;
  deleteManyNotes: (where?: NoteWhereInput) => BatchPayloadPromise;
  createPasswordReset: (data: PasswordResetCreateInput) => PasswordResetPromise;
  updatePasswordReset: (args: {
    data: PasswordResetUpdateInput;
    where: PasswordResetWhereUniqueInput;
  }) => PasswordResetPromise;
  updateManyPasswordResets: (args: {
    data: PasswordResetUpdateManyMutationInput;
    where?: PasswordResetWhereInput;
  }) => BatchPayloadPromise;
  upsertPasswordReset: (args: {
    where: PasswordResetWhereUniqueInput;
    create: PasswordResetCreateInput;
    update: PasswordResetUpdateInput;
  }) => PasswordResetPromise;
  deletePasswordReset: (
    where: PasswordResetWhereUniqueInput
  ) => PasswordResetPromise;
  deleteManyPasswordResets: (
    where?: PasswordResetWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  note: (
    where?: NoteSubscriptionWhereInput
  ) => NoteSubscriptionPayloadSubscription;
  passwordReset: (
    where?: PasswordResetSubscriptionWhereInput
  ) => PasswordResetSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type NoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "slugId_ASC"
  | "slugId_DESC"
  | "title_ASC"
  | "title_DESC"
  | "body_ASC"
  | "body_DESC"
  | "isPrivate_ASC"
  | "isPrivate_DESC";

export type PasswordResetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "resetId_ASC"
  | "resetId_DESC"
  | "expireDate_ASC"
  | "expireDate_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "usernameId_ASC"
  | "usernameId_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type NoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  slugId?: Maybe<String>;
}>;

export interface NoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  slugId?: Maybe<String>;
  slugId_not?: Maybe<String>;
  slugId_in?: Maybe<String[] | String>;
  slugId_not_in?: Maybe<String[] | String>;
  slugId_lt?: Maybe<String>;
  slugId_lte?: Maybe<String>;
  slugId_gt?: Maybe<String>;
  slugId_gte?: Maybe<String>;
  slugId_contains?: Maybe<String>;
  slugId_not_contains?: Maybe<String>;
  slugId_starts_with?: Maybe<String>;
  slugId_not_starts_with?: Maybe<String>;
  slugId_ends_with?: Maybe<String>;
  slugId_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
  isPrivate_not?: Maybe<Boolean>;
  AND?: Maybe<NoteWhereInput[] | NoteWhereInput>;
  OR?: Maybe<NoteWhereInput[] | NoteWhereInput>;
  NOT?: Maybe<NoteWhereInput[] | NoteWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  usernameId?: Maybe<String>;
  usernameId_not?: Maybe<String>;
  usernameId_in?: Maybe<String[] | String>;
  usernameId_not_in?: Maybe<String[] | String>;
  usernameId_lt?: Maybe<String>;
  usernameId_lte?: Maybe<String>;
  usernameId_gt?: Maybe<String>;
  usernameId_gte?: Maybe<String>;
  usernameId_contains?: Maybe<String>;
  usernameId_not_contains?: Maybe<String>;
  usernameId_starts_with?: Maybe<String>;
  usernameId_not_starts_with?: Maybe<String>;
  usernameId_ends_with?: Maybe<String>;
  usernameId_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  notes_every?: Maybe<NoteWhereInput>;
  notes_some?: Maybe<NoteWhereInput>;
  notes_none?: Maybe<NoteWhereInput>;
  passwordResets_every?: Maybe<PasswordResetWhereInput>;
  passwordResets_some?: Maybe<PasswordResetWhereInput>;
  passwordResets_none?: Maybe<PasswordResetWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PasswordResetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  resetId?: Maybe<String>;
  resetId_not?: Maybe<String>;
  resetId_in?: Maybe<String[] | String>;
  resetId_not_in?: Maybe<String[] | String>;
  resetId_lt?: Maybe<String>;
  resetId_lte?: Maybe<String>;
  resetId_gt?: Maybe<String>;
  resetId_gte?: Maybe<String>;
  resetId_contains?: Maybe<String>;
  resetId_not_contains?: Maybe<String>;
  resetId_starts_with?: Maybe<String>;
  resetId_not_starts_with?: Maybe<String>;
  resetId_ends_with?: Maybe<String>;
  resetId_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  expireDate?: Maybe<DateTimeInput>;
  expireDate_not?: Maybe<DateTimeInput>;
  expireDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expireDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expireDate_lt?: Maybe<DateTimeInput>;
  expireDate_lte?: Maybe<DateTimeInput>;
  expireDate_gt?: Maybe<DateTimeInput>;
  expireDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PasswordResetWhereInput[] | PasswordResetWhereInput>;
  OR?: Maybe<PasswordResetWhereInput[] | PasswordResetWhereInput>;
  NOT?: Maybe<PasswordResetWhereInput[] | PasswordResetWhereInput>;
}

export type PasswordResetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  resetId?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  usernameId?: Maybe<String>;
  username?: Maybe<String>;
}>;

export interface NoteCreateInput {
  id?: Maybe<ID_Input>;
  createdBy: UserCreateOneWithoutNotesInput;
  slugId: String;
  title: String;
  body: String;
  isPrivate: Boolean;
}

export interface UserCreateOneWithoutNotesInput {
  create?: Maybe<UserCreateWithoutNotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutNotesInput {
  id?: Maybe<ID_Input>;
  email: String;
  usernameId: String;
  username: String;
  password: String;
  passwordResets?: Maybe<PasswordResetCreateManyWithoutUserInput>;
}

export interface PasswordResetCreateManyWithoutUserInput {
  create?: Maybe<
    PasswordResetCreateWithoutUserInput[] | PasswordResetCreateWithoutUserInput
  >;
  connect?: Maybe<
    PasswordResetWhereUniqueInput[] | PasswordResetWhereUniqueInput
  >;
}

export interface PasswordResetCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  resetId: String;
  expireDate: DateTimeInput;
}

export interface NoteUpdateInput {
  createdBy?: Maybe<UserUpdateOneRequiredWithoutNotesInput>;
  slugId?: Maybe<String>;
  title?: Maybe<String>;
  body?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutNotesInput {
  create?: Maybe<UserCreateWithoutNotesInput>;
  update?: Maybe<UserUpdateWithoutNotesDataInput>;
  upsert?: Maybe<UserUpsertWithoutNotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutNotesDataInput {
  email?: Maybe<String>;
  usernameId?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  passwordResets?: Maybe<PasswordResetUpdateManyWithoutUserInput>;
}

export interface PasswordResetUpdateManyWithoutUserInput {
  create?: Maybe<
    PasswordResetCreateWithoutUserInput[] | PasswordResetCreateWithoutUserInput
  >;
  delete?: Maybe<
    PasswordResetWhereUniqueInput[] | PasswordResetWhereUniqueInput
  >;
  connect?: Maybe<
    PasswordResetWhereUniqueInput[] | PasswordResetWhereUniqueInput
  >;
  set?: Maybe<PasswordResetWhereUniqueInput[] | PasswordResetWhereUniqueInput>;
  disconnect?: Maybe<
    PasswordResetWhereUniqueInput[] | PasswordResetWhereUniqueInput
  >;
  update?: Maybe<
    | PasswordResetUpdateWithWhereUniqueWithoutUserInput[]
    | PasswordResetUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PasswordResetUpsertWithWhereUniqueWithoutUserInput[]
    | PasswordResetUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    PasswordResetScalarWhereInput[] | PasswordResetScalarWhereInput
  >;
  updateMany?: Maybe<
    | PasswordResetUpdateManyWithWhereNestedInput[]
    | PasswordResetUpdateManyWithWhereNestedInput
  >;
}

export interface PasswordResetUpdateWithWhereUniqueWithoutUserInput {
  where: PasswordResetWhereUniqueInput;
  data: PasswordResetUpdateWithoutUserDataInput;
}

export interface PasswordResetUpdateWithoutUserDataInput {
  resetId?: Maybe<String>;
  expireDate?: Maybe<DateTimeInput>;
}

export interface PasswordResetUpsertWithWhereUniqueWithoutUserInput {
  where: PasswordResetWhereUniqueInput;
  update: PasswordResetUpdateWithoutUserDataInput;
  create: PasswordResetCreateWithoutUserInput;
}

export interface PasswordResetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  resetId?: Maybe<String>;
  resetId_not?: Maybe<String>;
  resetId_in?: Maybe<String[] | String>;
  resetId_not_in?: Maybe<String[] | String>;
  resetId_lt?: Maybe<String>;
  resetId_lte?: Maybe<String>;
  resetId_gt?: Maybe<String>;
  resetId_gte?: Maybe<String>;
  resetId_contains?: Maybe<String>;
  resetId_not_contains?: Maybe<String>;
  resetId_starts_with?: Maybe<String>;
  resetId_not_starts_with?: Maybe<String>;
  resetId_ends_with?: Maybe<String>;
  resetId_not_ends_with?: Maybe<String>;
  expireDate?: Maybe<DateTimeInput>;
  expireDate_not?: Maybe<DateTimeInput>;
  expireDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expireDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expireDate_lt?: Maybe<DateTimeInput>;
  expireDate_lte?: Maybe<DateTimeInput>;
  expireDate_gt?: Maybe<DateTimeInput>;
  expireDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PasswordResetScalarWhereInput[] | PasswordResetScalarWhereInput>;
  OR?: Maybe<PasswordResetScalarWhereInput[] | PasswordResetScalarWhereInput>;
  NOT?: Maybe<PasswordResetScalarWhereInput[] | PasswordResetScalarWhereInput>;
}

export interface PasswordResetUpdateManyWithWhereNestedInput {
  where: PasswordResetScalarWhereInput;
  data: PasswordResetUpdateManyDataInput;
}

export interface PasswordResetUpdateManyDataInput {
  resetId?: Maybe<String>;
  expireDate?: Maybe<DateTimeInput>;
}

export interface UserUpsertWithoutNotesInput {
  update: UserUpdateWithoutNotesDataInput;
  create: UserCreateWithoutNotesInput;
}

export interface NoteUpdateManyMutationInput {
  slugId?: Maybe<String>;
  title?: Maybe<String>;
  body?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
}

export interface PasswordResetCreateInput {
  id?: Maybe<ID_Input>;
  resetId: String;
  user: UserCreateOneWithoutPasswordResetsInput;
  expireDate: DateTimeInput;
}

export interface UserCreateOneWithoutPasswordResetsInput {
  create?: Maybe<UserCreateWithoutPasswordResetsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPasswordResetsInput {
  id?: Maybe<ID_Input>;
  email: String;
  usernameId: String;
  username: String;
  password: String;
  notes?: Maybe<NoteCreateManyWithoutCreatedByInput>;
}

export interface NoteCreateManyWithoutCreatedByInput {
  create?: Maybe<
    NoteCreateWithoutCreatedByInput[] | NoteCreateWithoutCreatedByInput
  >;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
}

export interface NoteCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  slugId: String;
  title: String;
  body: String;
  isPrivate: Boolean;
}

export interface PasswordResetUpdateInput {
  resetId?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutPasswordResetsInput>;
  expireDate?: Maybe<DateTimeInput>;
}

export interface UserUpdateOneRequiredWithoutPasswordResetsInput {
  create?: Maybe<UserCreateWithoutPasswordResetsInput>;
  update?: Maybe<UserUpdateWithoutPasswordResetsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPasswordResetsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPasswordResetsDataInput {
  email?: Maybe<String>;
  usernameId?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  notes?: Maybe<NoteUpdateManyWithoutCreatedByInput>;
}

export interface NoteUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    NoteCreateWithoutCreatedByInput[] | NoteCreateWithoutCreatedByInput
  >;
  delete?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  set?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  disconnect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  update?: Maybe<
    | NoteUpdateWithWhereUniqueWithoutCreatedByInput[]
    | NoteUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | NoteUpsertWithWhereUniqueWithoutCreatedByInput[]
    | NoteUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  updateMany?: Maybe<
    NoteUpdateManyWithWhereNestedInput[] | NoteUpdateManyWithWhereNestedInput
  >;
}

export interface NoteUpdateWithWhereUniqueWithoutCreatedByInput {
  where: NoteWhereUniqueInput;
  data: NoteUpdateWithoutCreatedByDataInput;
}

export interface NoteUpdateWithoutCreatedByDataInput {
  slugId?: Maybe<String>;
  title?: Maybe<String>;
  body?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
}

export interface NoteUpsertWithWhereUniqueWithoutCreatedByInput {
  where: NoteWhereUniqueInput;
  update: NoteUpdateWithoutCreatedByDataInput;
  create: NoteCreateWithoutCreatedByInput;
}

export interface NoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  slugId?: Maybe<String>;
  slugId_not?: Maybe<String>;
  slugId_in?: Maybe<String[] | String>;
  slugId_not_in?: Maybe<String[] | String>;
  slugId_lt?: Maybe<String>;
  slugId_lte?: Maybe<String>;
  slugId_gt?: Maybe<String>;
  slugId_gte?: Maybe<String>;
  slugId_contains?: Maybe<String>;
  slugId_not_contains?: Maybe<String>;
  slugId_starts_with?: Maybe<String>;
  slugId_not_starts_with?: Maybe<String>;
  slugId_ends_with?: Maybe<String>;
  slugId_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
  isPrivate_not?: Maybe<Boolean>;
  AND?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  OR?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  NOT?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
}

export interface NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput;
  data: NoteUpdateManyDataInput;
}

export interface NoteUpdateManyDataInput {
  slugId?: Maybe<String>;
  title?: Maybe<String>;
  body?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
}

export interface UserUpsertWithoutPasswordResetsInput {
  update: UserUpdateWithoutPasswordResetsDataInput;
  create: UserCreateWithoutPasswordResetsInput;
}

export interface PasswordResetUpdateManyMutationInput {
  resetId?: Maybe<String>;
  expireDate?: Maybe<DateTimeInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  usernameId: String;
  username: String;
  password: String;
  notes?: Maybe<NoteCreateManyWithoutCreatedByInput>;
  passwordResets?: Maybe<PasswordResetCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  usernameId?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  notes?: Maybe<NoteUpdateManyWithoutCreatedByInput>;
  passwordResets?: Maybe<PasswordResetUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  usernameId?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
}

export interface NoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NoteWhereInput>;
  AND?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
  OR?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
  NOT?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
}

export interface PasswordResetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PasswordResetWhereInput>;
  AND?: Maybe<
    PasswordResetSubscriptionWhereInput[] | PasswordResetSubscriptionWhereInput
  >;
  OR?: Maybe<
    PasswordResetSubscriptionWhereInput[] | PasswordResetSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PasswordResetSubscriptionWhereInput[] | PasswordResetSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Note {
  id: ID_Output;
  createdAt: DateTimeOutput;
  slugId: String;
  title: String;
  body: String;
  isPrivate: Boolean;
}

export interface NotePromise extends Promise<Note>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  slugId: () => Promise<String>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  isPrivate: () => Promise<Boolean>;
}

export interface NoteSubscription
  extends Promise<AsyncIterator<Note>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  slugId: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  isPrivate: () => Promise<AsyncIterator<Boolean>>;
}

export interface NoteNullablePromise
  extends Promise<Note | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  slugId: () => Promise<String>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  isPrivate: () => Promise<Boolean>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  email: String;
  usernameId: String;
  username: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  usernameId: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  notes: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  passwordResets: <T = FragmentableArray<PasswordReset>>(args?: {
    where?: PasswordResetWhereInput;
    orderBy?: PasswordResetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  usernameId: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  notes: <T = Promise<AsyncIterator<NoteSubscription>>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  passwordResets: <
    T = Promise<AsyncIterator<PasswordResetSubscription>>
  >(args?: {
    where?: PasswordResetWhereInput;
    orderBy?: PasswordResetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  usernameId: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  notes: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  passwordResets: <T = FragmentableArray<PasswordReset>>(args?: {
    where?: PasswordResetWhereInput;
    orderBy?: PasswordResetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PasswordReset {
  id: ID_Output;
  resetId: String;
  expireDate: DateTimeOutput;
}

export interface PasswordResetPromise
  extends Promise<PasswordReset>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  resetId: () => Promise<String>;
  user: <T = UserPromise>() => T;
  expireDate: () => Promise<DateTimeOutput>;
}

export interface PasswordResetSubscription
  extends Promise<AsyncIterator<PasswordReset>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  resetId: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  expireDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PasswordResetNullablePromise
  extends Promise<PasswordReset | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  resetId: () => Promise<String>;
  user: <T = UserPromise>() => T;
  expireDate: () => Promise<DateTimeOutput>;
}

export interface NoteConnection {
  pageInfo: PageInfo;
  edges: NoteEdge[];
}

export interface NoteConnectionPromise
  extends Promise<NoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoteEdge>>() => T;
  aggregate: <T = AggregateNotePromise>() => T;
}

export interface NoteConnectionSubscription
  extends Promise<AsyncIterator<NoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoteSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface NoteEdge {
  node: Note;
  cursor: String;
}

export interface NoteEdgePromise extends Promise<NoteEdge>, Fragmentable {
  node: <T = NotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoteEdgeSubscription
  extends Promise<AsyncIterator<NoteEdge>>,
    Fragmentable {
  node: <T = NoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNote {
  count: Int;
}

export interface AggregateNotePromise
  extends Promise<AggregateNote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoteSubscription
  extends Promise<AsyncIterator<AggregateNote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PasswordResetConnection {
  pageInfo: PageInfo;
  edges: PasswordResetEdge[];
}

export interface PasswordResetConnectionPromise
  extends Promise<PasswordResetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PasswordResetEdge>>() => T;
  aggregate: <T = AggregatePasswordResetPromise>() => T;
}

export interface PasswordResetConnectionSubscription
  extends Promise<AsyncIterator<PasswordResetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PasswordResetEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePasswordResetSubscription>() => T;
}

export interface PasswordResetEdge {
  node: PasswordReset;
  cursor: String;
}

export interface PasswordResetEdgePromise
  extends Promise<PasswordResetEdge>,
    Fragmentable {
  node: <T = PasswordResetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PasswordResetEdgeSubscription
  extends Promise<AsyncIterator<PasswordResetEdge>>,
    Fragmentable {
  node: <T = PasswordResetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePasswordReset {
  count: Int;
}

export interface AggregatePasswordResetPromise
  extends Promise<AggregatePasswordReset>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePasswordResetSubscription
  extends Promise<AsyncIterator<AggregatePasswordReset>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface NoteSubscriptionPayload {
  mutation: MutationType;
  node: Note;
  updatedFields: String[];
  previousValues: NotePreviousValues;
}

export interface NoteSubscriptionPayloadPromise
  extends Promise<NoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotePreviousValuesPromise>() => T;
}

export interface NoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotePreviousValuesSubscription>() => T;
}

export interface NotePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  slugId: String;
  title: String;
  body: String;
  isPrivate: Boolean;
}

export interface NotePreviousValuesPromise
  extends Promise<NotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  slugId: () => Promise<String>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  isPrivate: () => Promise<Boolean>;
}

export interface NotePreviousValuesSubscription
  extends Promise<AsyncIterator<NotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  slugId: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  isPrivate: () => Promise<AsyncIterator<Boolean>>;
}

export interface PasswordResetSubscriptionPayload {
  mutation: MutationType;
  node: PasswordReset;
  updatedFields: String[];
  previousValues: PasswordResetPreviousValues;
}

export interface PasswordResetSubscriptionPayloadPromise
  extends Promise<PasswordResetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PasswordResetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PasswordResetPreviousValuesPromise>() => T;
}

export interface PasswordResetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PasswordResetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PasswordResetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PasswordResetPreviousValuesSubscription>() => T;
}

export interface PasswordResetPreviousValues {
  id: ID_Output;
  resetId: String;
  expireDate: DateTimeOutput;
}

export interface PasswordResetPreviousValuesPromise
  extends Promise<PasswordResetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  resetId: () => Promise<String>;
  expireDate: () => Promise<DateTimeOutput>;
}

export interface PasswordResetPreviousValuesSubscription
  extends Promise<AsyncIterator<PasswordResetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  resetId: () => Promise<AsyncIterator<String>>;
  expireDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  email: String;
  usernameId: String;
  username: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  usernameId: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  usernameId: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Note",
    embedded: false
  },
  {
    name: "PasswordReset",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
