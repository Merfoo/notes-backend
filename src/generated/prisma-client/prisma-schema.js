module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateNote {
  count: Int!
}

type AggregatePasswordReset {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createNote(data: NoteCreateInput!): Note!
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateManyNotes(data: NoteUpdateManyMutationInput!, where: NoteWhereInput): BatchPayload!
  upsertNote(where: NoteWhereUniqueInput!, create: NoteCreateInput!, update: NoteUpdateInput!): Note!
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteManyNotes(where: NoteWhereInput): BatchPayload!
  createPasswordReset(data: PasswordResetCreateInput!): PasswordReset!
  updatePasswordReset(data: PasswordResetUpdateInput!, where: PasswordResetWhereUniqueInput!): PasswordReset
  updateManyPasswordResets(data: PasswordResetUpdateManyMutationInput!, where: PasswordResetWhereInput): BatchPayload!
  upsertPasswordReset(where: PasswordResetWhereUniqueInput!, create: PasswordResetCreateInput!, update: PasswordResetUpdateInput!): PasswordReset!
  deletePasswordReset(where: PasswordResetWhereUniqueInput!): PasswordReset
  deleteManyPasswordResets(where: PasswordResetWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Note {
  id: ID!
  createdAt: DateTime!
  createdBy: User!
  titleId: String!
  title: String!
  body: String!
}

type NoteConnection {
  pageInfo: PageInfo!
  edges: [NoteEdge]!
  aggregate: AggregateNote!
}

input NoteCreateInput {
  id: ID
  createdBy: UserCreateOneWithoutNotesInput!
  titleId: String!
  title: String!
  body: String!
}

input NoteCreateManyWithoutCreatedByInput {
  create: [NoteCreateWithoutCreatedByInput!]
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateWithoutCreatedByInput {
  id: ID
  titleId: String!
  title: String!
  body: String!
}

type NoteEdge {
  node: Note!
  cursor: String!
}

enum NoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  titleId_ASC
  titleId_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
}

type NotePreviousValues {
  id: ID!
  createdAt: DateTime!
  titleId: String!
  title: String!
  body: String!
}

input NoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  titleId: String
  titleId_not: String
  titleId_in: [String!]
  titleId_not_in: [String!]
  titleId_lt: String
  titleId_lte: String
  titleId_gt: String
  titleId_gte: String
  titleId_contains: String
  titleId_not_contains: String
  titleId_starts_with: String
  titleId_not_starts_with: String
  titleId_ends_with: String
  titleId_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  AND: [NoteScalarWhereInput!]
  OR: [NoteScalarWhereInput!]
  NOT: [NoteScalarWhereInput!]
}

type NoteSubscriptionPayload {
  mutation: MutationType!
  node: Note
  updatedFields: [String!]
  previousValues: NotePreviousValues
}

input NoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NoteWhereInput
  AND: [NoteSubscriptionWhereInput!]
  OR: [NoteSubscriptionWhereInput!]
  NOT: [NoteSubscriptionWhereInput!]
}

input NoteUpdateInput {
  createdBy: UserUpdateOneRequiredWithoutNotesInput
  titleId: String
  title: String
  body: String
}

input NoteUpdateManyDataInput {
  titleId: String
  title: String
  body: String
}

input NoteUpdateManyMutationInput {
  titleId: String
  title: String
  body: String
}

input NoteUpdateManyWithoutCreatedByInput {
  create: [NoteCreateWithoutCreatedByInput!]
  delete: [NoteWhereUniqueInput!]
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [NoteScalarWhereInput!]
  updateMany: [NoteUpdateManyWithWhereNestedInput!]
}

input NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyDataInput!
}

input NoteUpdateWithoutCreatedByDataInput {
  titleId: String
  title: String
  body: String
}

input NoteUpdateWithWhereUniqueWithoutCreatedByInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutCreatedByDataInput!
}

input NoteUpsertWithWhereUniqueWithoutCreatedByInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutCreatedByDataInput!
  create: NoteCreateWithoutCreatedByInput!
}

input NoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  titleId: String
  titleId_not: String
  titleId_in: [String!]
  titleId_not_in: [String!]
  titleId_lt: String
  titleId_lte: String
  titleId_gt: String
  titleId_gte: String
  titleId_contains: String
  titleId_not_contains: String
  titleId_starts_with: String
  titleId_not_starts_with: String
  titleId_ends_with: String
  titleId_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
}

input NoteWhereUniqueInput {
  id: ID
  titleId: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PasswordReset {
  id: ID!
  resetId: String!
  user: User!
  expireDate: DateTime!
}

type PasswordResetConnection {
  pageInfo: PageInfo!
  edges: [PasswordResetEdge]!
  aggregate: AggregatePasswordReset!
}

input PasswordResetCreateInput {
  id: ID
  resetId: String!
  user: UserCreateOneWithoutPasswordResetsInput!
  expireDate: DateTime!
}

input PasswordResetCreateManyWithoutUserInput {
  create: [PasswordResetCreateWithoutUserInput!]
  connect: [PasswordResetWhereUniqueInput!]
}

input PasswordResetCreateWithoutUserInput {
  id: ID
  resetId: String!
  expireDate: DateTime!
}

type PasswordResetEdge {
  node: PasswordReset!
  cursor: String!
}

enum PasswordResetOrderByInput {
  id_ASC
  id_DESC
  resetId_ASC
  resetId_DESC
  expireDate_ASC
  expireDate_DESC
}

type PasswordResetPreviousValues {
  id: ID!
  resetId: String!
  expireDate: DateTime!
}

input PasswordResetScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  resetId: String
  resetId_not: String
  resetId_in: [String!]
  resetId_not_in: [String!]
  resetId_lt: String
  resetId_lte: String
  resetId_gt: String
  resetId_gte: String
  resetId_contains: String
  resetId_not_contains: String
  resetId_starts_with: String
  resetId_not_starts_with: String
  resetId_ends_with: String
  resetId_not_ends_with: String
  expireDate: DateTime
  expireDate_not: DateTime
  expireDate_in: [DateTime!]
  expireDate_not_in: [DateTime!]
  expireDate_lt: DateTime
  expireDate_lte: DateTime
  expireDate_gt: DateTime
  expireDate_gte: DateTime
  AND: [PasswordResetScalarWhereInput!]
  OR: [PasswordResetScalarWhereInput!]
  NOT: [PasswordResetScalarWhereInput!]
}

type PasswordResetSubscriptionPayload {
  mutation: MutationType!
  node: PasswordReset
  updatedFields: [String!]
  previousValues: PasswordResetPreviousValues
}

input PasswordResetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PasswordResetWhereInput
  AND: [PasswordResetSubscriptionWhereInput!]
  OR: [PasswordResetSubscriptionWhereInput!]
  NOT: [PasswordResetSubscriptionWhereInput!]
}

input PasswordResetUpdateInput {
  resetId: String
  user: UserUpdateOneRequiredWithoutPasswordResetsInput
  expireDate: DateTime
}

input PasswordResetUpdateManyDataInput {
  resetId: String
  expireDate: DateTime
}

input PasswordResetUpdateManyMutationInput {
  resetId: String
  expireDate: DateTime
}

input PasswordResetUpdateManyWithoutUserInput {
  create: [PasswordResetCreateWithoutUserInput!]
  delete: [PasswordResetWhereUniqueInput!]
  connect: [PasswordResetWhereUniqueInput!]
  set: [PasswordResetWhereUniqueInput!]
  disconnect: [PasswordResetWhereUniqueInput!]
  update: [PasswordResetUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PasswordResetUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PasswordResetScalarWhereInput!]
  updateMany: [PasswordResetUpdateManyWithWhereNestedInput!]
}

input PasswordResetUpdateManyWithWhereNestedInput {
  where: PasswordResetScalarWhereInput!
  data: PasswordResetUpdateManyDataInput!
}

input PasswordResetUpdateWithoutUserDataInput {
  resetId: String
  expireDate: DateTime
}

input PasswordResetUpdateWithWhereUniqueWithoutUserInput {
  where: PasswordResetWhereUniqueInput!
  data: PasswordResetUpdateWithoutUserDataInput!
}

input PasswordResetUpsertWithWhereUniqueWithoutUserInput {
  where: PasswordResetWhereUniqueInput!
  update: PasswordResetUpdateWithoutUserDataInput!
  create: PasswordResetCreateWithoutUserInput!
}

input PasswordResetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  resetId: String
  resetId_not: String
  resetId_in: [String!]
  resetId_not_in: [String!]
  resetId_lt: String
  resetId_lte: String
  resetId_gt: String
  resetId_gte: String
  resetId_contains: String
  resetId_not_contains: String
  resetId_starts_with: String
  resetId_not_starts_with: String
  resetId_ends_with: String
  resetId_not_ends_with: String
  user: UserWhereInput
  expireDate: DateTime
  expireDate_not: DateTime
  expireDate_in: [DateTime!]
  expireDate_not_in: [DateTime!]
  expireDate_lt: DateTime
  expireDate_lte: DateTime
  expireDate_gt: DateTime
  expireDate_gte: DateTime
  AND: [PasswordResetWhereInput!]
  OR: [PasswordResetWhereInput!]
  NOT: [PasswordResetWhereInput!]
}

input PasswordResetWhereUniqueInput {
  id: ID
  resetId: String
}

type Query {
  note(where: NoteWhereUniqueInput!): Note
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note]!
  notesConnection(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoteConnection!
  passwordReset(where: PasswordResetWhereUniqueInput!): PasswordReset
  passwordResets(where: PasswordResetWhereInput, orderBy: PasswordResetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PasswordReset]!
  passwordResetsConnection(where: PasswordResetWhereInput, orderBy: PasswordResetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PasswordResetConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  note(where: NoteSubscriptionWhereInput): NoteSubscriptionPayload
  passwordReset(where: PasswordResetSubscriptionWhereInput): PasswordResetSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  email: String!
  username: String!
  password: String!
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
  passwordResets(where: PasswordResetWhereInput, orderBy: PasswordResetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PasswordReset!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  username: String!
  password: String!
  notes: NoteCreateManyWithoutCreatedByInput
  passwordResets: PasswordResetCreateManyWithoutUserInput
}

input UserCreateOneWithoutNotesInput {
  create: UserCreateWithoutNotesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPasswordResetsInput {
  create: UserCreateWithoutPasswordResetsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNotesInput {
  id: ID
  email: String!
  username: String!
  password: String!
  passwordResets: PasswordResetCreateManyWithoutUserInput
}

input UserCreateWithoutPasswordResetsInput {
  id: ID
  email: String!
  username: String!
  password: String!
  notes: NoteCreateManyWithoutCreatedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  email: String!
  username: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  username: String
  password: String
  notes: NoteUpdateManyWithoutCreatedByInput
  passwordResets: PasswordResetUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  username: String
  password: String
}

input UserUpdateOneRequiredWithoutNotesInput {
  create: UserCreateWithoutNotesInput
  update: UserUpdateWithoutNotesDataInput
  upsert: UserUpsertWithoutNotesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPasswordResetsInput {
  create: UserCreateWithoutPasswordResetsInput
  update: UserUpdateWithoutPasswordResetsDataInput
  upsert: UserUpsertWithoutPasswordResetsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutNotesDataInput {
  email: String
  username: String
  password: String
  passwordResets: PasswordResetUpdateManyWithoutUserInput
}

input UserUpdateWithoutPasswordResetsDataInput {
  email: String
  username: String
  password: String
  notes: NoteUpdateManyWithoutCreatedByInput
}

input UserUpsertWithoutNotesInput {
  update: UserUpdateWithoutNotesDataInput!
  create: UserCreateWithoutNotesInput!
}

input UserUpsertWithoutPasswordResetsInput {
  update: UserUpdateWithoutPasswordResetsDataInput!
  create: UserCreateWithoutPasswordResetsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  notes_every: NoteWhereInput
  notes_some: NoteWhereInput
  notes_none: NoteWhereInput
  passwordResets_every: PasswordResetWhereInput
  passwordResets_some: PasswordResetWhereInput
  passwordResets_none: PasswordResetWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
`
      }
    